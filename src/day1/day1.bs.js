// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Core__Int = require("@rescript/core/src/Core__Int.bs.js");
var Js_string = require("rescript/lib/js/js_string.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

var input = Fs.readFileSync("input.txt", "ascii");

var sum = input.split("\n").map(function (n) {
        return n.split("").filter(function (c) {
                    if (c >= "1") {
                      return c <= "9";
                    } else {
                      return false;
                    }
                  });
      }).reduce((function (acc, i) {
        return acc + Belt_Option.getWithDefault(Core__Int.fromString(undefined, [
                          i[0],
                          i[i.length - 1 | 0]
                        ].join("")), 0) | 0;
      }), 0);

console.log(sum);

var words = [
  "nine",
  "eight",
  "seven",
  "six",
  "five",
  "four",
  "three",
  "two",
  "one"
];

function lettersToDigit(str) {
  switch (str) {
    case "eight" :
        return "8";
    case "five" :
        return "5";
    case "four" :
        return "4";
    case "nine" :
        return "9";
    case "one" :
        return "1";
    case "seven" :
        return "7";
    case "six" :
        return "6";
    case "three" :
        return "3";
    case "two" :
        return "2";
    default:
      return "";
  }
}

var sum2 = input.split("\n").map(function (n) {
        var buf = {
          contents: ""
        };
        n.split("").forEach(function (ltr) {
              buf.contents = Js_string.concat(ltr, buf.contents);
              words.forEach(function (w) {
                    buf.contents = buf.contents.replace(w, lettersToDigit(w));
                  });
            });
        return buf.contents.split("").filter(function (c) {
                    if (c >= "0") {
                      return c <= "9";
                    } else {
                      return false;
                    }
                  });
      }).reduce((function (acc, i) {
        return acc + Belt_Option.getWithDefault(Core__Int.fromString(undefined, [
                          i[0],
                          i[i.length - 1 | 0]
                        ].join("")), 0) | 0;
      }), 0);

console.log(sum2);

exports.input = input;
exports.sum = sum;
exports.words = words;
exports.lettersToDigit = lettersToDigit;
exports.sum2 = sum2;
/* input Not a pure module */
